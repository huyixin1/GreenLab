for(i in 1:10) {}
for(i in 1:10) {print(i/2 == i^-2)}
for(i in 1:10) {print(i/2 == i^(-2))}
for(i in 1:10) {print(i/2 == i^(-1))}
2^(-1)
for(i in 1:10) {print(i/2 == i^(-0.5))}
for(i in 1:10) {print(i/2)}
for(i in 1:10) {i^(-0.5))}
for(i in 1:10) {i^(-0.5)}
for(i in 1:10) {print(i^(-0.5))}
for(i in 1:10) {print(i^(-1))}
2^-1
pred <- rnorm(100,0,1)
pred
pred <- ifelse(pred>0,anon, orig)
pred <- ifelse(pred>0,"anon", "orig")
pred
crit <- pred + rnorm(100, 1,0)
pred <- rnorm(100,0,1)
pred <- ifelse(pred>0,"anon", "orig")
pred <- rnorm(100,0,1)
crit <- pred + rnorm(100, 1,0)
pred <- ifelse(pred>0,"anon", "orig")
pred
crit
lm(pred ~ crit)
lm(crit ~ pred)
lm(pred ~ crit)
summary(lm(crit ~ pred))
summary(lm(pred ~ crit))
X <- data.frame(pred, crit)
X
X$pred = factor(X$pred)
summary(lm(pred ~ crit))
summary(lm(crit ~ pred))
t.test()
X[pred=="anon"]
X[pred=="anon",]
t.test(X[pred=="anon",]$crit, X[pred="orig",]$crit)
t.test(X[pred=="anon",]$crit, X[pred=="orig",]$crit)
X = data.frame(ifelse(pred=="orig", 0, 1), crit)
X
t.test(X[pred=="anon",]$crit, X[pred=="orig",]$crit)
X = data.frame(ifelse(pred=="orig", 0, 1), crit)
X
t.test(X[pred==0,]$crit, X[pred==1,]$crit)
X = data.frame(pred = ifelse(pred=="orig", 0, 1), crit)
t.test(X[pred==0,]$crit, X[pred==1,]$crit)
X
X[pred==1,]$crit
X[pred==0,]
X[pred=="orig",]
X$pred <- as.numeric(X$pred)
X[pred=="orig",]
---
title: "Assignment_1"
\textcolor{red}{
Assume for the rest of this exercise that the CLRM assumptions hold. In particular, $\varepsilon \mid \mathbf{X} \sim \mathcal{N}\left(0, \sigma^2 I_{n+1}\right)$, where we define $\varepsilon=\left(\varepsilon_1, \varepsilon_2, \ldots, \varepsilon_{n+1}\right)^{\prime}$ and $\mathbf{X}^{\prime}=\left(x_1, x_2, \ldots, x_{n+1}\right)$.
\color{red}{
X <- read.csv("C:\\Users\\kilia\\Documents\\GitHub\\GreenLab\\data\\anonymized_training_data\\original_data")
X <- read.csv("C:\\Users\\kilia\\Documents\\GitHub\\GreenLab\\data\\anonymized_training_data\\original_data")
X <- read.csv("C:\\Users\\kilia\\Documents\\GitHub\\GreenLab\\data\\anonymized_training_data\\original_data")
#setWD to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load packages
pkgs <- c(
"tidyverse"
)
lapply(pkgs, library, character.only=TRUE)
# Original Data
#binary criterion == diabetes_binary$Diabetes_binary (badly balanced)
#pred == all others (all binary)
diabetes_binary <- read.csv("..\\data\\raw_data\\original_data\\diabetes_binary.csv")
PRED_diabetes_binary <- diabetes_binary %>% select(-Diabetes_binary)
CRIT_diabetes_binary <- diabetes_binary %>% select(Diabetes_binary)
NROW_diabetes_binary <- nrow(diabetes_binary)
NCOL_diabetes_binary <- ncol(diabetes_binary)
# Anonymized Data
diabetes_binary_anon <- read.csv("..\\data\\raw_data\\anonymized_data\\anonymized_diabetes_binary.csv")
PRED_diabetes_binary_anon <- diabetes_binary_anon %>% select(-Diabetes_binary)
CRIT_diabetes_binary_anon <- diabetes_binary_anon %>% select(Diabetes_binary)
assertthat::are_equal(ncol(PRED_diabetes_binary)+1, NCOL_diabetes_binary)
assertthat::assert_that(all(table(diabetes_binary$Diabetes_binary) > 10000))
assertthat::assert_that(NCOL_diabetes_binary > 20)
assertthat::assert_that(nrow(diabetes_binary) == nrow(diabetes_binary_anon))
assertthat::assert_that(ncol(diabetes_binary) == ncol(diabetes_binary_anon))
#hypervars
NAME <- "diabetes_binary"
rm(NAME)
#loopvars
N_features <- c(10, 15, 20)
N_rows <- c(1000, 5000, 10000)
reps <- 2
for (rep in 1:reps){
for(N_feature in N_features) {
for(N_row in N_rows){
# Derive Row Indices -------------------------------------------------------
index_0 <- which(CRIT == 0)
index_1 <- which(CRIT == 1)
sampled_indices_0 <- sample(index_0, ceiling(N_row/2))
sampled_indices_1 <- sample(index_1, ceiling(N_row/2))
balanced_sampled_indices <- c(sampled_indices_0, sampled_indices_1) %>% sample()
# Derive Col Indices -------------------------------------------------------
sampled_col_indices <- sample(c(1:ncol(PRED)), N_feature, replace=FALSE)
# Reduce Data --------------------------------------------------------------
original_crit_reduced <- CRIT_diabetes_binary[balanced_sampled_indices, ]
original_pred_reduced <- PRED_diabetes_binary[balanced_sampled_indices, sampled_col_indices]
anonymized_crit_reduced <- CRIT_diabetes_binary_anon[balanced_sampled_indices, ]
anonymized_pred_reduced <- PRED_diabetes_binary_anon[balanced_sampled_indices, sampled_col_indices]
# Save Data to Corresponding Folder ----------------------------------------
folder_name_original <- paste0(N_row,"r_",N_feature,"f")
# Original
write.csv(
original_pred_reduced,
file = paste0("..\\data\\original_training_data\\", folder_name_original, "\\X_reduced_diabetes_binary", rep, ".csv"),
row.names = FALSE
)
write.csv(
data.frame(y = original_crit_reduced),
file = paste0("..\\data\\original_training_data\\", folder_name_original, "\\y_reduced_diabetes_binary", rep, ".csv"),
row.names = FALSE
)
# Anonymized
write.csv(
anonymized_pred_reduced,
file = paste0("..\\data\\anonymized_training_data\\", folder_name_original, "\\X_reduced_diabetes_binary_anon", rep, ".csv"),
row.names = FALSE
)
write.csv(
data.frame(y = anonymized_crit_reduced),
file = paste0("..\\data\\anonymized_training_data\\", folder_name_original, "\\y_reduced_diabetes_binary_anon", rep, ".csv"),
row.names = FALSE
)
}
}
}
for (rep in 1:reps){
for(N_feature in N_features) {
for(N_row in N_rows){
# Derive Row Indices -------------------------------------------------------
index_0 <- which(CRIT_diabetes_binary == 0)
index_1 <- which(CRIT_diabetes_binary == 1)
sampled_indices_0 <- sample(index_0, ceiling(N_row/2))
sampled_indices_1 <- sample(index_1, ceiling(N_row/2))
balanced_sampled_indices <- c(sampled_indices_0, sampled_indices_1) %>% sample()
# Derive Col Indices -------------------------------------------------------
sampled_col_indices <- sample(c(1:ncol(PRED_diabetes_binary)), N_feature, replace=FALSE)
# Reduce Data --------------------------------------------------------------
original_crit_reduced <- CRIT_diabetes_binary[balanced_sampled_indices, ]
original_pred_reduced <- PRED_diabetes_binary[balanced_sampled_indices, sampled_col_indices]
anonymized_crit_reduced <- CRIT_diabetes_binary_anon[balanced_sampled_indices, ]
anonymized_pred_reduced <- PRED_diabetes_binary_anon[balanced_sampled_indices, sampled_col_indices]
# Save Data to Corresponding Folder ----------------------------------------
folder_name_original <- paste0(N_row,"r_",N_feature,"f")
# Original
write.csv(
original_pred_reduced,
file = paste0("..\\data\\original_training_data\\", folder_name_original, "\\X_reduced_diabetes_binary", rep, ".csv"),
row.names = FALSE
)
write.csv(
data.frame(y = original_crit_reduced),
file = paste0("..\\data\\original_training_data\\", folder_name_original, "\\y_reduced_diabetes_binary", rep, ".csv"),
row.names = FALSE
)
# Anonymized
write.csv(
anonymized_pred_reduced,
file = paste0("..\\data\\anonymized_training_data\\", folder_name_original, "\\X_reduced_diabetes_binary_anon", rep, ".csv"),
row.names = FALSE
)
write.csv(
data.frame(y = anonymized_crit_reduced),
file = paste0("..\\data\\anonymized_training_data\\", folder_name_original, "\\y_reduced_diabetes_binary_anon", rep, ".csv"),
row.names = FALSE
)
}
}
}
